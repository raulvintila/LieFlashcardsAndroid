package com.raulvintila.app.lieflashcards.Database.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table DBUSER.
*/
public class DBUserDao extends AbstractDao<DBUser, Long> {

    public static final String TABLENAME = "DBUSER";

    /**
     * Properties of entity DBUser.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property RemoteId = new Property(1, Long.class, "remoteId", false, "REMOTE_ID");
        public final static Property Email = new Property(2, String.class, "email", false, "EMAIL");
        public final static Property Passowrd = new Property(3, String.class, "passowrd", false, "PASSOWRD");
        public final static Property Salt = new Property(4, String.class, "salt", false, "SALT");
        public final static Property Version = new Property(5, String.class, "version", false, "VERSION");
        public final static Property Icon = new Property(6, String.class, "icon", false, "ICON");
        public final static Property DateCreated = new Property(7, long.class, "dateCreated", false, "DATE_CREATED");
        public final static Property Name = new Property(8, String.class, "name", false, "NAME");
        public final static Property OrderBy = new Property(9, String.class, "orderBy", false, "ORDER_BY");
    };

    private DaoSession daoSession;


    public DBUserDao(DaoConfig config) {
        super(config);
    }
    
    public DBUserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'DBUSER' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'REMOTE_ID' INTEGER UNIQUE ," + // 1: remoteId
                "'EMAIL' TEXT NOT NULL UNIQUE ," + // 2: email
                "'PASSOWRD' TEXT NOT NULL ," + // 3: passowrd
                "'SALT' TEXT NOT NULL ," + // 4: salt
                "'VERSION' TEXT NOT NULL ," + // 5: version
                "'ICON' TEXT NOT NULL ," + // 6: icon
                "'DATE_CREATED' INTEGER NOT NULL ," + // 7: dateCreated
                "'NAME' TEXT," + // 8: name
                "'ORDER_BY' TEXT);"); // 9: orderBy
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DBUSER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DBUser entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long remoteId = entity.getRemoteId();
        if (remoteId != null) {
            stmt.bindLong(2, remoteId);
        }
        stmt.bindString(3, entity.getEmail());
        stmt.bindString(4, entity.getPassowrd());
        stmt.bindString(5, entity.getSalt());
        stmt.bindString(6, entity.getVersion());
        stmt.bindString(7, entity.getIcon());
        stmt.bindLong(8, entity.getDateCreated());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(9, name);
        }
 
        String orderBy = entity.getOrderBy();
        if (orderBy != null) {
            stmt.bindString(10, orderBy);
        }
    }

    @Override
    protected void attachEntity(DBUser entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DBUser readEntity(Cursor cursor, int offset) {
        DBUser entity = new DBUser( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // remoteId
            cursor.getString(offset + 2), // email
            cursor.getString(offset + 3), // passowrd
            cursor.getString(offset + 4), // salt
            cursor.getString(offset + 5), // version
            cursor.getString(offset + 6), // icon
            cursor.getLong(offset + 7), // dateCreated
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // name
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // orderBy
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DBUser entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRemoteId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setEmail(cursor.getString(offset + 2));
        entity.setPassowrd(cursor.getString(offset + 3));
        entity.setSalt(cursor.getString(offset + 4));
        entity.setVersion(cursor.getString(offset + 5));
        entity.setIcon(cursor.getString(offset + 6));
        entity.setDateCreated(cursor.getLong(offset + 7));
        entity.setName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setOrderBy(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DBUser entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DBUser entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
