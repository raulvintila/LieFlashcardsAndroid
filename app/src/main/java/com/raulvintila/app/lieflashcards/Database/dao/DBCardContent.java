package com.raulvintila.app.lieflashcards.Database.dao;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 

/**
 * Entity mapped to table DBCARD_CONTENT.
 */
public class DBCardContent {

    private Long id;
    private Long remoteId;
    /** Not-null value. */
    private String name;
    /** Not-null value. */
    private String value;
    /** Not-null value. */
    private String type;
    /** Not-null value. */
    private String version;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient DBCardContentDao myDao;

    private DBCard card;
    private Long card__resolvedKey;


    public DBCardContent() {
    }

    public DBCardContent(Long id) {
        this.id = id;
    }

    public DBCardContent(Long id, Long remoteId, String name, String value, String type, String version) {
        this.id = id;
        this.remoteId = remoteId;
        this.name = name;
        this.value = value;
        this.type = type;
        this.version = version;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDBCardContentDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getRemoteId() {
        return remoteId;
    }

    public void setRemoteId(Long remoteId) {
        this.remoteId = remoteId;
    }

    /** Not-null value. */
    public String getName() {
        return name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setName(String name) {
        this.name = name;
    }

    /** Not-null value. */
    public String getValue() {
        return value;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setValue(String value) {
        this.value = value;
    }

    /** Not-null value. */
    public String getType() {
        return type;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setType(String type) {
        this.type = type;
    }

    /** Not-null value. */
    public String getVersion() {
        return version;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setVersion(String version) {
        this.version = version;
    }

    /** To-one relationship, resolved on first access. */
    public DBCard getCard() {
        Long __key = this.id;
        if (card__resolvedKey == null || !card__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DBCardDao targetDao = daoSession.getDBCardDao();
            DBCard cardNew = targetDao.load(__key);
            synchronized (this) {
                card = cardNew;
            	card__resolvedKey = __key;
            }
        }
        return card;
    }

    public void setCard(DBCard card) {
        synchronized (this) {
            this.card = card;
            id = card == null ? null : card.getId();
            card__resolvedKey = id;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
