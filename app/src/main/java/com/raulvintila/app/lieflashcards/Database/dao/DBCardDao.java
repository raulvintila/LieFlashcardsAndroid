package com.raulvintila.app.lieflashcards.Database.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table DBCARD.
*/
public class DBCardDao extends AbstractDao<DBCard, Long> {

    public static final String TABLENAME = "DBCARD";

    /**
     * Properties of entity DBCard.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property RemoteId = new Property(0, Long.class, "remoteId", false, "REMOTE_ID");
        public final static Property LayoutType = new Property(1, String.class, "layoutType", false, "LAYOUT_TYPE");
        public final static Property Tags = new Property(2, String.class, "tags", false, "TAGS");
        public final static Property DeckId = new Property(3, long.class, "deckId", false, "DECK_ID");
        public final static Property Id = new Property(4, Long.class, "id", true, "_id");
    };

    private Query<DBCard> dBDeck_CardsQuery;

    public DBCardDao(DaoConfig config) {
        super(config);
    }
    
    public DBCardDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'DBCARD' (" + //
                "'REMOTE_ID' INTEGER UNIQUE ," + // 0: remoteId
                "'LAYOUT_TYPE' TEXT NOT NULL ," + // 1: layoutType
                "'TAGS' TEXT," + // 2: tags
                "'DECK_ID' INTEGER NOT NULL ," + // 3: deckId
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT );"); // 4: id
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DBCARD'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DBCard entity) {
        stmt.clearBindings();
 
        Long remoteId = entity.getRemoteId();
        if (remoteId != null) {
            stmt.bindLong(1, remoteId);
        }
        stmt.bindString(2, entity.getLayoutType());
 
        String tags = entity.getTags();
        if (tags != null) {
            stmt.bindString(3, tags);
        }
        stmt.bindLong(4, entity.getDeckId());
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(5, id);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4);
    }    

    /** @inheritdoc */
    @Override
    public DBCard readEntity(Cursor cursor, int offset) {
        DBCard entity = new DBCard( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // remoteId
            cursor.getString(offset + 1), // layoutType
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // tags
            cursor.getLong(offset + 3), // deckId
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4) // id
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DBCard entity, int offset) {
        entity.setRemoteId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLayoutType(cursor.getString(offset + 1));
        entity.setTags(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDeckId(cursor.getLong(offset + 3));
        entity.setId(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DBCard entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DBCard entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "cards" to-many relationship of DBDeck. */
    public List<DBCard> _queryDBDeck_Cards(long deckId) {
        synchronized (this) {
            if (dBDeck_CardsQuery == null) {
                QueryBuilder<DBCard> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.DeckId.eq(null));
                dBDeck_CardsQuery = queryBuilder.build();
            }
        }
        Query<DBCard> query = dBDeck_CardsQuery.forCurrentThread();
        query.setParameter(0, deckId);
        return query.list();
    }

}
