package com.raulvintila.app.lieflashcards.Database.dao;

import java.util.List;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 

/**
 * Entity mapped to table DBUSER.
 */
public class DBUser {

    private Long id;
    private Long remoteId;
    /** Not-null value. */
    private String email;
    /** Not-null value. */
    private String passowrd;
    /** Not-null value. */
    private String salt;
    /** Not-null value. */
    private String version;
    /** Not-null value. */
    private String icon;
    private long dateCreated;
    private String name;
    private String orderBy;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient DBUserDao myDao;

    private List<DBUserDeck> userDecks;

    public DBUser() {
    }

    public DBUser(Long id) {
        this.id = id;
    }

    public DBUser(Long id, Long remoteId, String email, String passowrd, String salt, String version, String icon, long dateCreated, String name, String orderBy) {
        this.id = id;
        this.remoteId = remoteId;
        this.email = email;
        this.passowrd = passowrd;
        this.salt = salt;
        this.version = version;
        this.icon = icon;
        this.dateCreated = dateCreated;
        this.name = name;
        this.orderBy = orderBy;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDBUserDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getRemoteId() {
        return remoteId;
    }

    public void setRemoteId(Long remoteId) {
        this.remoteId = remoteId;
    }

    /** Not-null value. */
    public String getEmail() {
        return email;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setEmail(String email) {
        this.email = email;
    }

    /** Not-null value. */
    public String getPassowrd() {
        return passowrd;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setPassowrd(String passowrd) {
        this.passowrd = passowrd;
    }

    /** Not-null value. */
    public String getSalt() {
        return salt;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setSalt(String salt) {
        this.salt = salt;
    }

    /** Not-null value. */
    public String getVersion() {
        return version;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setVersion(String version) {
        this.version = version;
    }

    /** Not-null value. */
    public String getIcon() {
        return icon;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setIcon(String icon) {
        this.icon = icon;
    }

    public long getDateCreated() {
        return dateCreated;
    }

    public void setDateCreated(long dateCreated) {
        this.dateCreated = dateCreated;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getOrderBy() {
        return orderBy;
    }

    public void setOrderBy(String orderBy) {
        this.orderBy = orderBy;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<DBUserDeck> getUserDecks() {
        if (userDecks == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DBUserDeckDao targetDao = daoSession.getDBUserDeckDao();
            List<DBUserDeck> userDecksNew = targetDao._queryDBUser_UserDecks(id);
            synchronized (this) {
                if(userDecks == null) {
                    userDecks = userDecksNew;
                }
            }
        }
        return userDecks;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetUserDecks() {
        userDecks = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
