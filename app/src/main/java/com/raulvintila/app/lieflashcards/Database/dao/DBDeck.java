package com.raulvintila.app.lieflashcards.Database.dao;

import java.util.List;
import com.raulvintila.app.lieflashcards.Database.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table DBDECK.
 */
public class DBDeck {

    private Long id;
    private String remoteId;
    /** Not-null value. */
    private String name;
    private long number_of_cards;
    private long number_of_cards_per_day;
    private Long total_new_cards;
    private String status;
    /** Not-null value. */
    private java.util.Date date_created;
    private Boolean boolean_changed;
    private long userId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient DBDeckDao myDao;

    private List<DBCard> cards;
    private List<DBDeckTag> tags;

    public DBDeck() {
    }

    public DBDeck(Long id) {
        this.id = id;
    }

    public DBDeck(Long id, String remoteId, String name, long number_of_cards, long number_of_cards_per_day, Long total_new_cards, String status, java.util.Date date_created, Boolean boolean_changed, long userId) {
        this.id = id;
        this.remoteId = remoteId;
        this.name = name;
        /*if (name.length() < 9)
        {
            this.name = name;
        }
        else
        {
            this.name = name.substring(0,8)+"...";
        }*/
        this.number_of_cards = number_of_cards;
        this.number_of_cards_per_day = number_of_cards_per_day;
        this.total_new_cards = total_new_cards;
        this.status = status;
        this.date_created = date_created;
        this.boolean_changed = boolean_changed;
        this.userId = userId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDBDeckDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getRemoteId() {
        return remoteId;
    }

    public void setRemoteId(String remoteId) {
        this.remoteId = remoteId;
    }

    /** Not-null value. */
    public String getName() {
        return name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setName(String name) {
        this.name = name;
    }

    public long getNumber_of_cards() {
        return number_of_cards;
    }

    public void setNumber_of_cards(long number_of_cards) {
        this.number_of_cards = number_of_cards;
    }

    public long getNumber_of_cards_per_day() {
        return number_of_cards_per_day;
    }

    public void setNumber_of_cards_per_day(long number_of_cards_per_day) {
        this.number_of_cards_per_day = number_of_cards_per_day;
    }

    public Long getTotal_new_cards() {
        return total_new_cards;
    }

    public void setTotal_new_cards(Long total_new_cards) {
        this.total_new_cards = total_new_cards;
    }

    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    /** Not-null value. */
    public java.util.Date getDate_created() {
        return date_created;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setDate_created(java.util.Date date_created) {
        this.date_created = date_created;
    }

    public Boolean getBoolean_changed() {
        return boolean_changed;
    }

    public void setBoolean_changed(Boolean boolean_changed) {
        this.boolean_changed = boolean_changed;
    }

    public long getUserId() {
        return userId;
    }

    public void setUserId(long userId) {
        this.userId = userId;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<DBCard> getCards() {
        if (cards == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DBCardDao targetDao = daoSession.getDBCardDao();
            List<DBCard> cardsNew = targetDao._queryDBDeck_Cards(id);
            synchronized (this) {
                if(cards == null) {
                    cards = cardsNew;
                }
            }
        }
        return cards;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetCards() {
        cards = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<DBDeckTag> getTags() {
        if (tags == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DBDeckTagDao targetDao = daoSession.getDBDeckTagDao();
            List<DBDeckTag> tagsNew = targetDao._queryDBDeck_Tags(id);
            synchronized (this) {
                if(tags == null) {
                    tags = tagsNew;
                }
            }
        }
        return tags;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetTags() {
        tags = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.refresh(this);
    }


}