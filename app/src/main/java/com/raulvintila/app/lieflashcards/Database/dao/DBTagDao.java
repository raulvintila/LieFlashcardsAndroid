package com.raulvintila.app.lieflashcards.Database.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.raulvintila.app.lieflashcards.Database.dao.DBTag;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table DBTAG.
*/
public class DBTagDao extends AbstractDao<DBTag, Long> {

    public static final String TABLENAME = "DBTAG";

    /**
     * Properties of entity DBTag.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Text = new Property(1, String.class, "text", false, "TEXT");
        public final static Property DeckId = new Property(2, long.class, "deckId", false, "DECK_ID");
        public final static Property CardId = new Property(3, long.class, "cardId", false, "CARD_ID");
    };

    private Query<DBTag> dBDeck_TagsQuery;
    private Query<DBTag> dBCard_TagsQuery;

    public DBTagDao(DaoConfig config) {
        super(config);
    }
    
    public DBTagDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'DBTAG' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'TEXT' TEXT NOT NULL ," + // 1: text
                "'DECK_ID' INTEGER NOT NULL ," + // 2: deckId
                "'CARD_ID' INTEGER NOT NULL );"); // 3: cardId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DBTAG'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DBTag entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getText());
        stmt.bindLong(3, entity.getDeckId());
        stmt.bindLong(4, entity.getCardId());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DBTag readEntity(Cursor cursor, int offset) {
        DBTag entity = new DBTag( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // text
            cursor.getLong(offset + 2), // deckId
            cursor.getLong(offset + 3) // cardId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DBTag entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setText(cursor.getString(offset + 1));
        entity.setDeckId(cursor.getLong(offset + 2));
        entity.setCardId(cursor.getLong(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DBTag entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DBTag entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "tags" to-many relationship of DBDeck. */
    public List<DBTag> _queryDBDeck_Tags(long deckId) {
        synchronized (this) {
            if (dBDeck_TagsQuery == null) {
                QueryBuilder<DBTag> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.DeckId.eq(null));
                dBDeck_TagsQuery = queryBuilder.build();
            }
        }
        Query<DBTag> query = dBDeck_TagsQuery.forCurrentThread();
        query.setParameter(0, deckId);
        return query.list();
    }

    /** Internal query to resolve the "tags" to-many relationship of DBCard. */
    public List<DBTag> _queryDBCard_Tags(long cardId) {
        synchronized (this) {
            if (dBCard_TagsQuery == null) {
                QueryBuilder<DBTag> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.CardId.eq(null));
                dBCard_TagsQuery = queryBuilder.build();
            }
        }
        Query<DBTag> query = dBCard_TagsQuery.forCurrentThread();
        query.setParameter(0, cardId);
        return query.list();
    }

}
