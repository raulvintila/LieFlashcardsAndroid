package com.raulvintila.app.lieflashcards.Database.dao;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 

/**
 * Entity mapped to table DBUSER_DECK.
 */
public class DBUserDeck {

    private Long id;
    private Long remoteId;
    private String stack;
    /** Not-null value. */
    private String status;
    private int position;
    private int cardsPerDay;
    private long userId;
    private long deckId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient DBUserDeckDao myDao;

    private DBDeck deck;
    private Long deck__resolvedKey;


    public DBUserDeck() {
    }

    public DBUserDeck(Long id) {
        this.id = id;
    }

    public DBUserDeck(Long id, Long remoteId, String stack, String status, int position, int cardsPerDay, long userId, long deckId) {
        this.id = id;
        this.remoteId = remoteId;
        this.stack = stack;
        this.status = status;
        this.position = position;
        this.cardsPerDay = cardsPerDay;
        this.userId = userId;
        this.deckId = deckId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDBUserDeckDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getRemoteId() {
        return remoteId;
    }

    public void setRemoteId(Long remoteId) {
        this.remoteId = remoteId;
    }

    public String getStack() {
        return stack;
    }

    public void setStack(String stack) {
        this.stack = stack;
    }

    /** Not-null value. */
    public String getStatus() {
        return status;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setStatus(String status) {
        this.status = status;
    }

    public int getPosition() {
        return position;
    }

    public void setPosition(int position) {
        this.position = position;
    }

    public int getCardsPerDay() {
        return cardsPerDay;
    }

    public void setCardsPerDay(int cardsPerDay) {
        this.cardsPerDay = cardsPerDay;
    }

    public long getUserId() {
        return userId;
    }

    public void setUserId(long userId) {
        this.userId = userId;
    }

    public long getDeckId() {
        return deckId;
    }

    public void setDeckId(long deckId) {
        this.deckId = deckId;
    }

    /** To-one relationship, resolved on first access. */
    public DBDeck getDeck() {
        long __key = this.deckId;
        if (deck__resolvedKey == null || !deck__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DBDeckDao targetDao = daoSession.getDBDeckDao();
            DBDeck deckNew = targetDao.load(__key);
            synchronized (this) {
                deck = deckNew;
            	deck__resolvedKey = __key;
            }
        }
        return deck;
    }

    public void setDeck(DBDeck deck) {
        if (deck == null) {
            throw new DaoException("To-one property 'deckId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.deck = deck;
            deckId = deck.getId();
            deck__resolvedKey = deckId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
