package com.raulvintila.app.lieflashcards.Database.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table DBCARD_PROGRESS.
*/
public class DBCardProgressDao extends AbstractDao<DBCardProgress, Long> {

    public static final String TABLENAME = "DBCARD_PROGRESS";

    /**
     * Properties of entity DBCardProgress.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property RemoteId = new Property(1, Long.class, "remoteId", false, "REMOTE_ID");
        public final static Property Level = new Property(2, double.class, "level", false, "LEVEL");
        public final static Property Volatility = new Property(3, double.class, "volatility", false, "VOLATILITY");
        public final static Property LastStudyDate = new Property(4, Long.class, "lastStudyDate", false, "LAST_STUDY_DATE");
        public final static Property Version = new Property(5, String.class, "version", false, "VERSION");
        public final static Property DeckId = new Property(6, long.class, "deckId", false, "DECK_ID");
    };

    private Query<DBCardProgress> dBCard_CardsProgressQuery;

    public DBCardProgressDao(DaoConfig config) {
        super(config);
    }
    
    public DBCardProgressDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'DBCARD_PROGRESS' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'REMOTE_ID' INTEGER UNIQUE ," + // 1: remoteId
                "'LEVEL' REAL NOT NULL ," + // 2: level
                "'VOLATILITY' REAL NOT NULL ," + // 3: volatility
                "'LAST_STUDY_DATE' INTEGER," + // 4: lastStudyDate
                "'VERSION' TEXT NOT NULL ," + // 5: version
                "'DECK_ID' INTEGER NOT NULL );"); // 6: deckId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DBCARD_PROGRESS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DBCardProgress entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long remoteId = entity.getRemoteId();
        if (remoteId != null) {
            stmt.bindLong(2, remoteId);
        }
        stmt.bindDouble(3, entity.getLevel());
        stmt.bindDouble(4, entity.getVolatility());
 
        Long lastStudyDate = entity.getLastStudyDate();
        if (lastStudyDate != null) {
            stmt.bindLong(5, lastStudyDate);
        }
        stmt.bindString(6, entity.getVersion());
        stmt.bindLong(7, entity.getDeckId());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DBCardProgress readEntity(Cursor cursor, int offset) {
        DBCardProgress entity = new DBCardProgress( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // remoteId
            cursor.getDouble(offset + 2), // level
            cursor.getDouble(offset + 3), // volatility
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // lastStudyDate
            cursor.getString(offset + 5), // version
            cursor.getLong(offset + 6) // deckId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DBCardProgress entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRemoteId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setLevel(cursor.getDouble(offset + 2));
        entity.setVolatility(cursor.getDouble(offset + 3));
        entity.setLastStudyDate(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setVersion(cursor.getString(offset + 5));
        entity.setDeckId(cursor.getLong(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DBCardProgress entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DBCardProgress entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "cardsProgress" to-many relationship of DBCard. */
    public List<DBCardProgress> _queryDBCard_CardsProgress(long deckId) {
        synchronized (this) {
            if (dBCard_CardsProgressQuery == null) {
                QueryBuilder<DBCardProgress> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.DeckId.eq(null));
                dBCard_CardsProgressQuery = queryBuilder.build();
            }
        }
        Query<DBCardProgress> query = dBCard_CardsProgressQuery.forCurrentThread();
        query.setParameter(0, deckId);
        return query.list();
    }

}
