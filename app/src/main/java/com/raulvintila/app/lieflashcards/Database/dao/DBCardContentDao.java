package com.raulvintila.app.lieflashcards.Database.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.raulvintila.app.lieflashcards.Database.dao.DBCardContent;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table DBCARD_CONTENT.
*/
public class DBCardContentDao extends AbstractDao<DBCardContent, Long> {

    public static final String TABLENAME = "DBCARD_CONTENT";

    /**
     * Properties of entity DBCardContent.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property RemoteId = new Property(1, Long.class, "remoteId", false, "REMOTE_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Value = new Property(3, String.class, "value", false, "VALUE");
        public final static Property Type = new Property(4, String.class, "type", false, "TYPE");
        public final static Property Version = new Property(5, String.class, "version", false, "VERSION");
        public final static Property CardId = new Property(6, long.class, "cardId", false, "CARD_ID");
    };

    private Query<DBCardContent> dBCard_CardContentsQuery;

    public DBCardContentDao(DaoConfig config) {
        super(config);
    }
    
    public DBCardContentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'DBCARD_CONTENT' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'REMOTE_ID' INTEGER UNIQUE ," + // 1: remoteId
                "'NAME' TEXT NOT NULL ," + // 2: name
                "'VALUE' TEXT NOT NULL ," + // 3: value
                "'TYPE' TEXT NOT NULL ," + // 4: type
                "'VERSION' TEXT NOT NULL ," + // 5: version
                "'CARD_ID' INTEGER NOT NULL );"); // 6: cardId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DBCARD_CONTENT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DBCardContent entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long remoteId = entity.getRemoteId();
        if (remoteId != null) {
            stmt.bindLong(2, remoteId);
        }
        stmt.bindString(3, entity.getName());
        stmt.bindString(4, entity.getValue());
        stmt.bindString(5, entity.getType());
        stmt.bindString(6, entity.getVersion());
        stmt.bindLong(7, entity.getCardId());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DBCardContent readEntity(Cursor cursor, int offset) {
        DBCardContent entity = new DBCardContent( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // remoteId
            cursor.getString(offset + 2), // name
            cursor.getString(offset + 3), // value
            cursor.getString(offset + 4), // type
            cursor.getString(offset + 5), // version
            cursor.getLong(offset + 6) // cardId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DBCardContent entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRemoteId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setName(cursor.getString(offset + 2));
        entity.setValue(cursor.getString(offset + 3));
        entity.setType(cursor.getString(offset + 4));
        entity.setVersion(cursor.getString(offset + 5));
        entity.setCardId(cursor.getLong(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DBCardContent entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DBCardContent entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "cardContents" to-many relationship of DBCard. */
    public List<DBCardContent> _queryDBCard_CardContents(long cardId) {
        synchronized (this) {
            if (dBCard_CardContentsQuery == null) {
                QueryBuilder<DBCardContent> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.CardId.eq(null));
                dBCard_CardContentsQuery = queryBuilder.build();
            }
        }
        Query<DBCardContent> query = dBCard_CardContentsQuery.forCurrentThread();
        query.setParameter(0, cardId);
        return query.list();
    }

}
