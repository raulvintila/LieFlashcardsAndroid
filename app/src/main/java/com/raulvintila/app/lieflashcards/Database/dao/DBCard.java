package com.raulvintila.app.lieflashcards.Database.dao;

import java.util.List;
import com.raulvintila.app.lieflashcards.Database.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table DBCARD.
 */
public class DBCard {

    private Long id;
    private Long remoteId;
    /** Not-null value. */
    private String layoutType;
    private String tags;
    private long deckId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient DBCardDao myDao;

    private List<DBCardContent> cardContents;

    public DBCard() {
    }

    public DBCard(Long id) {
        this.id = id;
    }

    public DBCard(Long id, Long remoteId, String layoutType, String tags, long deckId) {
        this.id = id;
        this.remoteId = remoteId;
        this.layoutType = layoutType;
        this.tags = tags;
        this.deckId = deckId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDBCardDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getRemoteId() {
        return remoteId;
    }

    public void setRemoteId(Long remoteId) {
        this.remoteId = remoteId;
    }

    /** Not-null value. */
    public String getLayoutType() {
        return layoutType;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setLayoutType(String layoutType) {
        this.layoutType = layoutType;
    }

    public String getTags() {
        return tags;
    }

    public void setTags(String tags) {
        this.tags = tags;
    }

    public long getDeckId() {
        return deckId;
    }

    public void setDeckId(long deckId) {
        this.deckId = deckId;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<DBCardContent> getCardContents() {
        if (cardContents == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DBCardContentDao targetDao = daoSession.getDBCardContentDao();
            List<DBCardContent> cardContentsNew = targetDao._queryDBCard_CardContents(id);
            synchronized (this) {
                if(cardContents == null) {
                    cardContents = cardContentsNew;
                }
            }
        }
        return cardContents;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetCardContents() {
        cardContents = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
