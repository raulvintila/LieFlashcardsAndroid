package com.raulvintila.app.lieflashcards.Database.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import java.util.ArrayList;
import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table DBCARD.
*/
public class DBCardDao extends AbstractDao<DBCard, Long> {

    public static final String TABLENAME = "DBCARD";

    /**
     * Properties of entity DBCard.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property RemoteId = new Property(1, Long.class, "remoteId", false, "REMOTE_ID");
        public final static Property Question = new Property(2, String.class, "question", false, "QUESTION");
        public final static Property Question_type = new Property(3, String.class, "question_type", false, "QUESTION_TYPE");
        public final static Property Answer = new Property(4, String.class, "answer", false, "ANSWER");
        public final static Property Answer_type = new Property(5, String.class, "answer_type", false, "ANSWER_TYPE");
        public final static Property Hint = new Property(6, String.class, "hint", false, "HINT");
        public final static Property Hint_type = new Property(7, String.class, "hint_type", false, "HINT_TYPE");
        public final static Property Last_study = new Property(8, java.util.Date.class, "last_study", false, "LAST_STUDY");
        public final static Property Date_created = new Property(9, java.util.Date.class, "date_created", false, "DATE_CREATED");
        public final static Property Current_level = new Property(10, Double.class, "current_level", false, "CURRENT_LEVEL");
        public final static Property Volatility = new Property(11, Double.class, "volatility", false, "VOLATILITY");
        public final static Property DeckId = new Property(12, long.class, "deckId", false, "DECK_ID");
        public final static Property CardId = new Property(13, long.class, "cardId", false, "CARD_ID");
    };

    private DaoSession daoSession;

    private Query<DBCard> dBDeck_CardsQuery;

    public DBCardDao(DaoConfig config) {
        super(config);
    }
    
    public DBCardDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'DBCARD' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'REMOTE_ID' INTEGER UNIQUE ," + // 1: remoteId
                "'QUESTION' TEXT NOT NULL ," + // 2: question
                "'QUESTION_TYPE' TEXT NOT NULL ," + // 3: question_type
                "'ANSWER' TEXT NOT NULL ," + // 4: answer
                "'ANSWER_TYPE' TEXT NOT NULL ," + // 5: answer_type
                "'HINT' TEXT," + // 6: hint
                "'HINT_TYPE' TEXT," + // 7: hint_type
                "'LAST_STUDY' INTEGER," + // 8: last_study
                "'DATE_CREATED' INTEGER," + // 9: date_created
                "'CURRENT_LEVEL' REAL," + // 10: current_level
                "'VOLATILITY' REAL," + // 11: volatility
                "'DECK_ID' INTEGER NOT NULL ," + // 12: deckId
                "'CARD_ID' INTEGER NOT NULL );"); // 13: cardId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DBCARD'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DBCard entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long remoteId = entity.getRemoteId();
        if (remoteId != null) {
            stmt.bindLong(2, remoteId);
        }
        stmt.bindString(3, entity.getQuestion());
        stmt.bindString(4, entity.getQuestion_type());
        stmt.bindString(5, entity.getAnswer());
        stmt.bindString(6, entity.getAnswer_type());
 
        String hint = entity.getHint();
        if (hint != null) {
            stmt.bindString(7, hint);
        }
 
        String hint_type = entity.getHint_type();
        if (hint_type != null) {
            stmt.bindString(8, hint_type);
        }
 
        java.util.Date last_study = entity.getLast_study();
        if (last_study != null) {
            stmt.bindLong(9, last_study.getTime());
        }
 
        java.util.Date date_created = entity.getDate_created();
        if (date_created != null) {
            stmt.bindLong(10, date_created.getTime());
        }
 
        Double current_level = entity.getCurrent_level();
        if (current_level != null) {
            stmt.bindDouble(11, current_level);
        }
 
        Double volatility = entity.getVolatility();
        if (volatility != null) {
            stmt.bindDouble(12, volatility);
        }
        stmt.bindLong(13, entity.getDeckId());
    }

    @Override
    protected void attachEntity(DBCard entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DBCard readEntity(Cursor cursor, int offset) {
        DBCard entity = new DBCard( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // remoteId
            cursor.getString(offset + 2), // question
            cursor.getString(offset + 3), // question_type
            cursor.getString(offset + 4), // answer
            cursor.getString(offset + 5), // answer_type
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // hint
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // hint_type
            cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)), // last_study
            cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)), // date_created
            cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10), // current_level
            cursor.isNull(offset + 11) ? null : cursor.getDouble(offset + 11), // volatility
            cursor.getLong(offset + 12) // deckId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DBCard entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRemoteId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setQuestion(cursor.getString(offset + 2));
        entity.setQuestion_type(cursor.getString(offset + 3));
        entity.setAnswer(cursor.getString(offset + 4));
        entity.setAnswer_type(cursor.getString(offset + 5));
        entity.setHint(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setHint_type(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setLast_study(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
        entity.setDate_created(cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)));
        entity.setCurrent_level(cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10));
        entity.setVolatility(cursor.isNull(offset + 11) ? null : cursor.getDouble(offset + 11));
        entity.setDeckId(cursor.getLong(offset + 12));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DBCard entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DBCard entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "cards" to-many relationship of DBDeck. */
    public List<DBCard> _queryDBDeck_Cards(long deckId) {
        synchronized (this) {
            if (dBDeck_CardsQuery == null) {
                QueryBuilder<DBCard> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.DeckId.eq(null));
                dBDeck_CardsQuery = queryBuilder.build();
            }
        }
        Query<DBCard> query = dBDeck_CardsQuery.forCurrentThread();
        query.setParameter(0, deckId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getDBCardContentDao().getAllColumns());
            builder.append(" FROM DBCARD T");
            builder.append(" LEFT JOIN DBCARD_CONTENT T0 ON T.'CARD_ID'=T0.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected DBCard loadCurrentDeep(Cursor cursor, boolean lock) {
        DBCard entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        DBCardContent card = loadCurrentOther(daoSession.getDBCardContentDao(), cursor, offset);
         if(card != null) {
            entity.setCard(card);
        }

        return entity;    
    }

    public DBCard loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<DBCard> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<DBCard> list = new ArrayList<DBCard>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<DBCard> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<DBCard> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
