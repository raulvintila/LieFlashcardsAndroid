package com.raulvintila.app.lieflashcards.Database.dao;

import java.util.List;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 

/**
 * Entity mapped to table DBCARD.
 */
public class DBCard {

    private Long id;
    private Long remoteId;
    /** Not-null value. */
    private String question;
    /** Not-null value. */
    private String question_type;
    /** Not-null value. */
    private String answer;
    /** Not-null value. */
    private String answer_type;
    private String hint;
    private String hint_type;
    private java.util.Date last_study;
    private java.util.Date date_created;
    private Double current_level;
    private Double volatility;
    private long deckId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient DBCardDao myDao;

    private DBCardContent card;
    private Long card__resolvedKey;

    private List<DBCardProgress> cardsProgress;

    public DBCard() {
    }

    public DBCard(Long id) {
        this.id = id;
    }

    public DBCard(Long id, Long remoteId, String question, String question_type, String answer, String answer_type, String hint, String hint_type, java.util.Date last_study, java.util.Date date_created, Double current_level, Double volatility, long deckId) {
        this.id = id;
        this.remoteId = remoteId;
        this.question = question;
        this.question_type = question_type;
        this.answer = answer;
        this.answer_type = answer_type;
        this.hint = hint;
        this.hint_type = hint_type;
        this.last_study = last_study;
        this.date_created = date_created;
        this.current_level = current_level;
        this.volatility = volatility;
        this.deckId = deckId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDBCardDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getRemoteId() {
        return remoteId;
    }

    public void setRemoteId(Long remoteId) {
        this.remoteId = remoteId;
    }

    /** Not-null value. */
    public String getQuestion() {
        return question;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setQuestion(String question) {
        this.question = question;
    }

    /** Not-null value. */
    public String getQuestion_type() {
        return question_type;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setQuestion_type(String question_type) {
        this.question_type = question_type;
    }

    /** Not-null value. */
    public String getAnswer() {
        return answer;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setAnswer(String answer) {
        this.answer = answer;
    }

    /** Not-null value. */
    public String getAnswer_type() {
        return answer_type;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setAnswer_type(String answer_type) {
        this.answer_type = answer_type;
    }

    public String getHint() {
        return hint;
    }

    public void setHint(String hint) {
        this.hint = hint;
    }

    public String getHint_type() {
        return hint_type;
    }

    public void setHint_type(String hint_type) {
        this.hint_type = hint_type;
    }

    public java.util.Date getLast_study() {
        return last_study;
    }

    public void setLast_study(java.util.Date last_study) {
        this.last_study = last_study;
    }

    public java.util.Date getDate_created() {
        return date_created;
    }

    public void setDate_created(java.util.Date date_created) {
        this.date_created = date_created;
    }

    public Double getCurrent_level() {
        return current_level;
    }

    public void setCurrent_level(Double current_level) {
        this.current_level = current_level;
    }

    public Double getVolatility() {
        return volatility;
    }

    public void setVolatility(Double volatility) {
        this.volatility = volatility;
    }

    public long getDeckId() {
        return deckId;
    }

    public void setDeckId(long deckId) {
        this.deckId = deckId;
    }

    /** To-one relationship, resolved on first access. */
    public DBCardContent getCard() {
        long __key = this.cardId;
        if (card__resolvedKey == null || !card__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DBCardContentDao targetDao = daoSession.getDBCardContentDao();
            DBCardContent cardNew = targetDao.load(__key);
            synchronized (this) {
                card = cardNew;
            	card__resolvedKey = __key;
            }
        }
        return card;
    }

    public void setCard(DBCardContent card) {
        if (card == null) {
            throw new DaoException("To-one property 'cardId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.card = card;
            cardId = card.getId();
            card__resolvedKey = cardId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<DBCardProgress> getCardsProgress() {
        if (cardsProgress == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DBCardProgressDao targetDao = daoSession.getDBCardProgressDao();
            List<DBCardProgress> cardsProgressNew = targetDao._queryDBCard_CardsProgress(id);
            synchronized (this) {
                if(cardsProgress == null) {
                    cardsProgress = cardsProgressNew;
                }
            }
        }
        return cardsProgress;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetCardsProgress() {
        cardsProgress = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
